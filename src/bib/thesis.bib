@article{King:1976:SEP:360248.360252,
 author = {King, James C.},
 title = {Symbolic Execution and Program Testing},
 journal = {Commun. ACM},
 issue_date = {July 1976},
 volume = {19},
 number = {7},
 month = jul,
 year = {1976},
 issn = {0001-0782},
 pages = {385--394},
 numpages = {10},
 url = {http://doi.acm.org/10.1145/360248.360252},
 doi = {10.1145/360248.360252},
 acmid = {360252},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {program debugging, program proving, program testing, program verification, symbolic execution, symbolic interpretation},
}
@ARTICLE{159342, 
author={}, 
journal={IEEE Std 610.12-1990}, 
title={IEEE Standard Glossary of Software Engineering Terminology}, 
year={1990}, 
volume={}, 
number={}, 
pages={1-84}, 
keywords={glossaries;software engineering;standards;IEEE Std 610.12-1990;standard glossary;software engineering terminology;Terminology;Software engineering;Standards;glossary;terminology;dictionary;Software engineering;Definitions}, 
doi={10.1109/IEEESTD.1990.101064}, 
ISSN={}, 
month={Dec},}
@ARTICLE{1510569, 
author={D. Janzen and H. Saiedian}, 
journal={Computer}, 
title={Test-driven development concepts, taxonomy, and future direction}, 
year={2005}, 
volume={38}, 
number={9}, 
pages={43-50}, 
keywords={program testing;software prototyping;software development management;test-driven development;software iteration;automated test software;software development strategy;extreme programming;Taxonomy;Automatic testing;Programming profession;Writing;Software testing;Automatic programming;Production;Books;Computer science;Software engineering;iterative software development;software development;test-driven development;extreme programming}, 
doi={10.1109/MC.2005.314}, 
ISSN={0018-9162}, 
month={Sept},}
@article{Ruparelia:2010:SDL:1764810.1764814,
 author = {Ruparelia, Nayan B.},
 title = {Software Development Lifecycle Models},
 journal = {SIGSOFT Softw. Eng. Notes},
 issue_date = {May 2010},
 volume = {35},
 number = {3},
 month = may,
 year = {2010},
 issn = {0163-5948},
 pages = {8--13},
 numpages = {6},
 url = {http://doi.acm.org/10.1145/1764810.1764814},
 doi = {10.1145/1764810.1764814},
 acmid = {1764814},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {B-model, RAD, SDLC, SEN history column, Vmodel, incremental, spiral, unified, waterfall, wheel-and-spoke},
}
@article{Olan:2003:UTT:948785.948830,
 author = {Olan, Michael},
 title = {Unit Testing: Test Early, Test Often},
 journal = {J. Comput. Sci. Coll.},
 issue_date = {December 2003},
 volume = {19},
 number = {2},
 month = dec,
 year = {2003},
 issn = {1937-4771},
 pages = {319--328},
 numpages = {10},
 url = {http://dl.acm.org/citation.cfm?id=948785.948830},
 acmid = {948830},
 publisher = {Consortium for Computing Sciences in Colleges},
 address = {USA},
}
@ARTICLE{5487526, 
author={Y. Jia and M. Harman}, 
journal={IEEE Transactions on Software Engineering}, 
title={An Analysis and Survey of the Development of Mutation Testing}, 
year={2011}, 
volume={37}, 
number={5}, 
pages={649-678}, 
keywords={fault diagnosis;program testing;mutation testing development;fault-based software testing technique;empirical results;comprehensive analysis;development trend analysis;mutation testing technique;mutation testing tool;Genetic mutations;Software testing;Fault detection;History;Books;Programming profession;Computer languages;Java;Educational institutions;Automata;Mutation testing;survey.}, 
doi={10.1109/TSE.2010.62}, 
ISSN={0098-5589}, 
month={Sept},}
@misc{aron_mut, 
author={Aron Szabo}, 
title={Mutációs tesztelés}, 
month={May},
year={2018}, 
url={http://inf.mit.bme.hu/edu/individual/reports/2018-tavasz/ae0f10/mutációs-tesztelés},
}
@misc{aron_autom, 
author={Aron Szabo}, 
title={Automatikus tesztelés}, 
month={Dec},
year={2017}, 
url={https://inf.mit.bme.hu/edu/individual/reports/2017-ősz/ae0f10/automatikus-tesztelés},
}
@manual{intellitest_manual, 
organization={Microsoft}, 
title={Microsoft IntelliTest Manual}, 
year={2017}, 
month={Feb},
url={https://docs.microsoft.com/en-us/visualstudio/test/intellitest-manual/introduction},}
@manual{z3_api, 
organization={Microsoft Research}, 
title={Z3 API Documentation}, 
year={2018}, 
month={Jul},
url={http://z3prover.github.io/api/html/index.html},}
@manual{z3_tutorial, 
organization={Microsoft Research}, 
title={RiSE4Fun Getting Started with Z3: A Guide}, 
year={2018}, 
url={https://rise4fun.com/Z3/tutorial/guide},}
@manual{labview_under_the_hood, 
organization={National Instruments}, 
title={NI LabVIEW Compiler: Under the Hood}, 
year={2016}, 
url={http://www.ni.com/tutorial/11472/en/},}
@Inproceedings{advances-in-unit-testing-theory-and-practice,
author = {Xie, Tao and Tillmann, Nikolai and Lakshman, Pratap},
title = {Advances in Unit Testing: Theory and Practice},
booktitle = {Proc. 38th International Conference on Software Engineering (ICSE 2016)},
year = {2016},
month = {May},
abstract = {

Parameterized unit testing, recent advances in unit testing, is a new methodology extending the previous industry practice based on traditional unit tests without parameters. A parameterized unit test (PUT) is simply a test method that takes parameters, calls the code under test, and states assertions. Parameterized unit testing allows the separation of two testing concerns or tasks: the specification of external, black-box behavior (i.e., assertions or specifications) by developers and the generation and selection of internal, whitebox test inputs (i.e., high-code-covering test inputs) by tools. PUTs have been supported by various testing frameworks. Various open source and industrial testing tools also exist to generate test inputs for PUTs. This technical briefing presents latest research on principles and techniques, as well as practical considerations to apply parameterized unit testing on real-world programs, highlighting success stories, research and education achievements, and future research directions in developer testing.


},
url = {https://www.microsoft.com/en-us/research/publication/advances-in-unit-testing-theory-and-practice/},
edition = {Proc. 38th International Conference on Software Engineering (ICSE 2016)},
}
@article{Pasareanu2013SymbolicPI,
  title={Symbolic PathFinder: integrating symbolic execution with model checking for Java bytecode analysis},
  author={Corina S. Pasareanu and Willem Visser and David H. Bushnell and Jaco Geldenhuys and Peter C. Mehlitz and Neha Rungta},
  journal={Automated Software Engineering},
  year={2013},
  volume={20},
  pages={391-425}
}
@ARTICLE{nxg_article, 
journal={Electronics Maker}, 
title={LabVIEW NXG is the future of LabVIEW}, 
year={2017}, 
url={https://electronicsmaker.com/labview-nxg-is-the-future-of-labview},
month={June},}
